import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TextInput, TouchableOpacity, FlatList, ActivityIndicator } from 'react-native';
import { io } from "socket.io-client";

const socket = io("http://192.168.1.116:3000");

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.error("ErrorBoundary caught an error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return ( 
          <View>
            <Text>Something went wrong.</Text>
          </View>
      );
    }

    return this.props.children; 
  }
}


const ChatScreen = ({ route, navigation }) => {
  const { userId, matchId } = route.params;
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(true); // Loading state

  useEffect(() => {
    // Join the match room
    socket.emit('joinMatch', { matchId, userId });

    // Listen for new messages
    socket.on('newMessage', (newMessage) => {
      setMessages((prevMessages) => [...prevMessages, newMessage]);
      setIsLoading(false); // Data loaded, stop loading
    });

    // Handle connection errors
    socket.on('connect_error', (error) => {
      console.error('Socket.IO connection error:', error);
      setIsLoading(false); // Stop loading on error
    });

    // Handle disconnection
    socket.on('disconnect', (reason) => {
      console.log('Socket.IO disconnected:', reason);
      setIsLoading(false); // Stop loading on disconnect
    });

    return () => {
      socket.off('newMessage');
      socket.off('connect_error');
      socket.off('disconnect');
    };
  }, [matchId, userId]);

  const sendMessage = () => {
    if (message.trim() !== '') {
      const newMessage = {
        id: Date.now().toString(), // Use timestamp as unique ID
        sender: userId,
        text: message,
        timestamp: new Date().getTime()
      };

      socket.emit('sendMessage', { message: newMessage, matchId });
      setMessages((prevMessages) => [...prevMessages, newMessage]);
      setMessage('');
    }
  };

  const renderMessage = ({ item }) => (
    <View style={[
      styles.messageContainer,
      item.sender === userId ? styles.myMessage : styles.otherMessage
    ]}>
      {item.text ? ( // Conditionally render message text
        <Text style={[styles.messageText, item.sender === userId ? styles.myMessageText : styles.otherMessageText]}>
          {item.text}
        </Text>
      ) : null}
    </View>
  );

  return (
    <ErrorBoundary> {/* Wrap ChatScreen content in ErrorBoundary */}
      <View style={styles.container}>
        {isLoading ? ( // Conditionally render loading indicator
          <ActivityIndicator size="large" color="#0000ff" />
        ) : (
          <>
            {matchId ? ( // Conditionally render matchId
              <Text style={styles.matchIdText}>Match ID: {matchId}</Text>
            ) : null}
            <FlatList
              data={messages}
              renderItem={renderMessage}
              keyExtractor={(item) => item.id.toString()}
              inverted={true}
            />
          </>
        )}
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.input}
            placeholder="Type your message..."
            onChangeText={setMessage}
            value={message}
          />
          <TouchableOpacity style={styles.sendButton} onPress={sendMessage}> 
            <Text style={styles.sendButtonText}>Send</Text> 
          </TouchableOpacity>
        </View>
      </View>
    </ErrorBoundary>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10
  },
  matchIdText: { // Style for the match ID text
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center'
  },
  messageContainer: {
    padding: 10,
    margin: 5,
    borderRadius: 5,
    maxWidth: '80%',
  },
  myMessage: {
    alignSelf: 'flex-end',
    backgroundColor: '#DCF8C6',
  },
  otherMessage: {
    alignSelf: 'flex-start',
    backgroundColor: '#E5E5E5',
  },
  myMessageText: {
    fontSize: 16,
    color: 'blue', // Example color for your messages
  },
  otherMessageText: {
    fontSize: 16,
    color: 'black', // Example color for other user's messages
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 5,
  },
  input: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginRight: 10,
    borderRadius: 5,
  },
  sendButton: {
    backgroundColor: '#007bff', // Or any color you prefer
    padding: 10,
    borderRadius: 5,
  },
  sendButtonText: {
    color: 'white',
    fontSize: 16,
  },
});

export default ChatScreen;
import React, { useState, useEffect } from 'react';
import { View, Text, Button, StyleSheet, ActivityIndicator, Alert, TouchableOpacity } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import io from 'socket.io-client';
import { v4 as uuidv4 } from 'uuid';

// Replace with your actual local IP address and port
const socket = io('http://192.168.1.116:3000');

const HomeScreen = ({ navigation }) => {
  const [city, setCity] = useState('choose');
  const [time, setTime] = useState('choose');
  const [game, setGame] = useState('choose');
  const [loading, setLoading] = useState(false);
  const [userId, setUserId] = useState(uuidv4());
  const [countdown, setCountdown] = useState(300);
  const [isSearching, setIsSearching] = useState(false);
  const [currentMatch, setCurrentMatch] = useState(null);

  useEffect(() => {
    console.log('Connecting to server...');
    socket.on('connect', () => {
      console.log('Connected to server with socket id:', socket.id);
    });

    socket.on('matchFound', (matchData) => {
      setLoading(false);
      setCountdown(300);
      setIsSearching(false);
      // Navigation after data is set:
      setCurrentMatch(matchData); 
      navigation.navigate('Chat', { ...matchData, userId }); 
    });

    socket.on('connect_error', (error) => {
      console.error('Connection error:', error);
      Alert.alert('Error', 'Could not connect to the matchmaking server.');
    });

    return () => {
      socket.off('matchFound');
      socket.off('connect');
      socket.off('connect_error'); // Cleanup error handler
    };
  }, [navigation]);

  useEffect(() => {
    let timer;
    if (loading) {
      timer = setInterval(() => {
        setCountdown((prevCountdown) => {
          if (prevCountdown <= 1) {
            clearInterval(timer);
            setLoading(false);
            setIsSearching(false);
            Alert.alert(
              'Search Stopped',
              'No player found within 5 minutes.'
            );
            return 300;
          }
          return prevCountdown - 1;
        });
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [loading]);

  const searchMatch = () => {
    if (city === 'choose' || time === 'choose' || game === 'choose') {
      Alert.alert(
        'Error',
        'Please choose a city, time, and game type before searching.'
      );
      return;
    }
    if (currentMatch) {
      Alert.alert(
        'Active Match',
        'You are currently matched with someone. Are you sure you want to search for a new match?',
        [
          {
            text: 'No',
            style: 'cancel',
          },
          {
            text: 'Yes',
            onPress: () => {
              // Emit 'leaveMatch' event to server
              socket.emit('leaveMatch', { userId, matchId: currentMatch.matchId }); // Assuming you have a matchId in your matchData
              console.log('Leaving current match to search for a new one.');

              // Proceed with search
              setLoading(true);
              setIsSearching(true);
              socket.emit('startSearch', { city, time, game, userId });
            },
          },
        ]
      );
    } else {
      // No active match, proceed with search
      console.log('Emitting startSearch with:', { city, time, game, userId });
      setLoading(true);
      setIsSearching(true);
      socket.emit('startSearch', { city, time, game, userId });
    }
  };

  const cancelSearch = () => {
    if (loading) {
      setLoading(false);
      setCountdown(300);
      setIsSearching(false);
      socket.emit('cancelSearch', { userId });
      console.log('Search canceled');
    }
  };

  const renderPicker = (label, selectedValue, onValueChange, options) => (
    <>
      <Text style={styles.label}>{label}</Text>
      <Picker
        selectedValue={selectedValue}
        onValueChange={onValueChange}
        style={styles.picker}
        enabled={!isSearching}
      >
        <Picker.Item label={`Choose ${label}`} value="choose" />
        {options.map((option) => (
          <Picker.Item key={option.value} label={option.label} value={option.value} />
        ))}
      </Picker>
    </>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.userId}>User ID: {userId}</Text>

      {currentMatch && (
              <TouchableOpacity
                style={styles.matchButton}
                onPress={() => navigation.navigate('Chat', { ...currentMatch, userId })}
              >
                <Text style={styles.matchButtonText}>Match</Text>
              </TouchableOpacity>
            )}

      {renderPicker('City', city, setCity, [
        { label: 'New York', value: 'newyork' },
        { label: 'Los Angeles', value: 'losangeles' },
        { label: 'Chicago', value: 'chicago' },
        // Add more city options
      ])}

      {renderPicker('Time', time, setTime, [
        { label: 'Morning', value: 'morning' },
        { label: 'Afternoon', value: 'afternoon' },
        // Add more time options
      ])}

      {renderPicker('Game Type', game, setGame, [
        { label: 'Game 1', value: 'game1' },
        { label: 'Game 2', value: 'game2' },
        // Add more game options
      ])}

      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#0000ff" />
          <Text style={styles.loadingText}>Searching for a player...</Text>
          <Text style={styles.loadingText}>
            Time left: {Math.floor(countdown / 60)}:{(countdown % 60).toString().padStart(2, '0')}
          </Text>
          <Button title="Cancel" onPress={cancelSearch} />
        </View>
      ) : (
        <View style={styles.buttonContainer}>
          <Button title="Search" onPress={searchMatch} />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 16,
    backgroundColor: '#fff',
  },
  userId: {
    marginBottom: 16,
    fontSize: 16,
    color: '#000',
  },
  label: {
    marginVertical: 8,
    fontSize: 16,
    color: '#000',
  },
  picker: {
    height: 50,
    marginBottom: 16,
    color: '#000',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#0000ff',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  matchButton: {
    backgroundColor: '#007bff',
    padding: 10,
    borderRadius: 5,
    marginBottom: 20,
  },
  matchButtonText: {
    color: 'white',
    textAlign: 'center',
    fontSize: 16,
  },
});

export default HomeScreen;
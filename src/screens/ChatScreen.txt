import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  Button,
  FlatList,
  StyleSheet
} from 'react-native';
import io from 'socket.io-client';

// Replace with your server address
const socket = io('http://192.168.8.33:3000');

const ChatScreen = ({ route, navigation }) => {
  const { userId, matchId } = route.params;
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    // Join the match room
    socket.emit('joinMatch', { matchId, userId });

    // Listen for new messages
    socket.on('newMessage', (newMessage) => {
      setMessages((prevMessages) => [...prevMessages, newMessage]);
    });

    // Handle connection errors
    socket.on('connect_error', (error) => {
      console.error('Socket.IO connection error:', error);
      // Handle the error, e.g., display an error message to the user
    });

    // Handle disconnection
    socket.on('disconnect', (reason) => {
      console.log('Socket.IO disconnected:', reason);
      // Handle the disconnection, e.g., display a message to the user
    });

    return () => {
      socket.off('newMessage');
      socket.off('connect_error');
      socket.off('disconnect');
    };
  }, [matchId, userId]);

  const sendMessage = () => {
    if (message.trim() !== '') {
      const newMessage = {
        id: uuidv4(), // Generate a unique ID using uuid
         sender: userId,
         text: message,
         timestamp: new Date().getTime() // Add timestamp
      };

      socket.emit('sendMessage', { message: newMessage, matchId });
      setMessages((prevMessages) => [...prevMessages, newMessage]);
      setMessage('');
    }
  };

  const renderMessage = ({ item }) => (
    <View style={[
      styles.messageContainer,
      item.sender === userId ? styles.myMessage : styles.otherMessage
    ]}>
      <Text
        style={[
          styles.messageText,
          item.sender === userId ? styles.myMessageText : styles.otherMessageText
        ]}
      >
        {item.text}
      </Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.matchIdText}>Match ID: {matchId}</Text> {/* Display match ID */}
      <FlatList
        data={messages}
        renderItem={renderMessage}
        keyExtractor={(item) => item.id.toString()}
        inverted={true} // Display new messages at the bottom
      />
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder="Type your message..."
          onChangeText={setMessage}
          value={message}
        />
        <Button title="Send" onPress={sendMessage} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10
  },
  matchIdText: { // Style for the match ID text
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center'
  },
  messageContainer: {
    padding: 10,
    margin: 5,
    borderRadius: 5,
    maxWidth: '80%',
  },
  myMessage: {
    alignSelf: 'flex-end',
    backgroundColor: '#DCF8C6',
  },
  otherMessage: {
    alignSelf: 'flex-start',
    backgroundColor: '#E5E5E5',
  },
  myMessageText: {
    fontSize: 16,
    color: 'blue', // Example color for your messages
  },
  otherMessageText: {
    fontSize: 16,
    color: 'black', // Example color for other user's messages
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 5,
  },
  input: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginRight: 10,
    borderRadius: 5,
  },
});

export default ChatScreen;